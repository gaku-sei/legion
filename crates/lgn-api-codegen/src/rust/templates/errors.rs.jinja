use axum::{
    http::StatusCode,
    response::{IntoResponse, Response},
};
use lgn_tracing::warn;

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("internal: {0}")]
    Internal(String),
    #[error("hyper: {0}")]
    Hyper(#[from] hyper::Error),
    #[error("serde json: {0}")]
    SerdeJson(#[from] serde_json::Error),
    #[error("serde qs: {0}")]
    SerdeQs(#[from] serde_qs::Error),
    #[error("codegen encoding: {0}")]
    CodegenEncoding(#[from] lgn_online::codegen::encoding::Error),
    #[error("invalid body: {0}")]
    InvalidBody(String),
    #[error("invalid header: {0}")]
    InvalidHeader(String),
    #[error("missing header: {0}")]
    MissingHeader(String),
}

pub type Result<T, E = Error> = std::result::Result<T, E>;

impl IntoResponse for Error {
    fn into_response(self) -> Response {
        warn!("converted error into HTTP response: {}", self);

        match self {
            Self::Internal(_) | Self::Hyper(_) | Self::SerdeJson(_) | Self::SerdeQs(_) => {
                StatusCode::INTERNAL_SERVER_ERROR.into_response()
            }
            Self::CodegenEncoding(_) | Self::InvalidBody(_) | Self::InvalidHeader(_) | Self::MissingHeader(_) => {
                StatusCode::BAD_REQUEST.into_response()
            }
        }
    }
}

pub trait ErrorExt<T> {
    /// Converts to an internal server error.
    /// # Errors
    /// If we fail to return a response.
    fn into_internal_server_error(self) -> Result<T, Error>;
}

impl<T, E: std::error::Error> ErrorExt<T> for Result<T, E> {
    fn into_internal_server_error(self) -> Result<T, Error> {
        self.map_err(|err| Error::Internal(err.to_string()))
    }
}