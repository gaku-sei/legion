use lgn_online::codegen::Bytes;

{% for model in location_ctx.models.values() %}
    {% if let Some(description) = model.description %}/// {{ description }}{% endif -%}
    {% match model.type_ %}
        {% when Type::Enum with { variants } %}
            #[derive(Debug, Clone, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
            pub enum {{ model|fmt_model_name(ctx) }}
            {
                {%- for variant in variants -%}
                    #[serde(rename = "{{ variant }}")]
                    {{ variant|pascal_case }},
                {%- endfor -%}
            }
        {% when Type::OneOf with { types } %}
            #[derive(Debug, Clone, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
            pub enum {{ model|fmt_model_name(ctx) }}
            {
                {%- for type_ in types -%}
                    #[serde(rename = "option{{loop.index}}")]
                    Option{{loop.index}}({{ type_|fmt_type(ctx, module_path) }}),
                {%- endfor -%}
            }
        {% when Type::Struct with { fields } %}
            #[derive(Debug, Clone, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
            pub struct {{ model|fmt_model_name(ctx) }} {
                {% for field in fields.values() %}
                    {% if let Some(description) = field.description -%}/// {{ description }}{%- endif %}
                    #[serde(rename = "{{ field.name }}")]
                    {%- if field.required -%}
                    pub {{ field.name|fmt_field }}: {{ field.type_|fmt_type(ctx, module_path) }},
                    {%- else -%}
                    #[serde(skip_serializing_if = "Option::is_none")]
                    pub {{ field.name|fmt_field }}: Option<{{ field.type_|fmt_type(ctx, module_path) }}>,
                    {%- endif -%}
                {% endfor %}
            }
        {% when t %}
            #[derive(Debug, Clone, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
            pub struct {{ model|fmt_model_name(ctx) }}(pub {{ t|fmt_type(ctx, module_path) }});

            impl From<{{ t|fmt_type(ctx, module_path) }}> for {{ model|fmt_model_name(ctx) }} {
                fn from(t: {{ t|fmt_type(ctx, module_path) }}) -> Self {
                    Self(t)
                }
            }
    {% endmatch %}
{% endfor %}