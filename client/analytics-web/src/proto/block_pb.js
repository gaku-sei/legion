// source: block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.telemetry.Block', null, global);
goog.exportSymbol('proto.telemetry.BlockPayload', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.BlockPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telemetry.BlockPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.BlockPayload.displayName = 'proto.telemetry.BlockPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telemetry.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.Block.displayName = 'proto.telemetry.Block';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.BlockPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.BlockPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.BlockPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.BlockPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    dependencies: msg.getDependencies_asB64(),
    objects: msg.getObjects_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.BlockPayload}
 */
proto.telemetry.BlockPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.BlockPayload;
  return proto.telemetry.BlockPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.BlockPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.BlockPayload}
 */
proto.telemetry.BlockPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDependencies(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.BlockPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.BlockPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.BlockPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.BlockPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDependencies_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getObjects_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes dependencies = 1;
 * @return {!(string|Uint8Array)}
 */
proto.telemetry.BlockPayload.prototype.getDependencies = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dependencies = 1;
 * This is a type-conversion wrapper around `getDependencies()`
 * @return {string}
 */
proto.telemetry.BlockPayload.prototype.getDependencies_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDependencies()));
};


/**
 * optional bytes dependencies = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDependencies()`
 * @return {!Uint8Array}
 */
proto.telemetry.BlockPayload.prototype.getDependencies_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDependencies()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.telemetry.BlockPayload} returns this
 */
proto.telemetry.BlockPayload.prototype.setDependencies = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes objects = 2;
 * @return {!(string|Uint8Array)}
 */
proto.telemetry.BlockPayload.prototype.getObjects = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes objects = 2;
 * This is a type-conversion wrapper around `getObjects()`
 * @return {string}
 */
proto.telemetry.BlockPayload.prototype.getObjects_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getObjects()));
};


/**
 * optional bytes objects = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObjects()`
 * @return {!Uint8Array}
 */
proto.telemetry.BlockPayload.prototype.getObjects_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getObjects()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.telemetry.BlockPayload} returns this
 */
proto.telemetry.BlockPayload.prototype.setObjects = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streamId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beginTime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    beginTicks: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    endTicks: jspb.Message.getFieldWithDefault(msg, 6, 0),
    payload: (f = msg.getPayload()) && proto.telemetry.BlockPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.Block}
 */
proto.telemetry.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.Block;
  return proto.telemetry.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.Block}
 */
proto.telemetry.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeginTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBeginTicks(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndTicks(value);
      break;
    case 7:
      var value = new proto.telemetry.BlockPayload;
      reader.readMessage(value,proto.telemetry.BlockPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeginTime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBeginTicks();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getEndTime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEndTicks();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.telemetry.BlockPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string block_id = 1;
 * @return {string}
 */
proto.telemetry.Block.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string stream_id = 2;
 * @return {string}
 */
proto.telemetry.Block.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string begin_time = 3;
 * @return {string}
 */
proto.telemetry.Block.prototype.getBeginTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setBeginTime = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 begin_ticks = 4;
 * @return {number}
 */
proto.telemetry.Block.prototype.getBeginTicks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setBeginTicks = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string end_time = 5;
 * @return {string}
 */
proto.telemetry.Block.prototype.getEndTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 end_ticks = 6;
 * @return {number}
 */
proto.telemetry.Block.prototype.getEndTicks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.setEndTicks = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional BlockPayload payload = 7;
 * @return {?proto.telemetry.BlockPayload}
 */
proto.telemetry.Block.prototype.getPayload = function() {
  return /** @type{?proto.telemetry.BlockPayload} */ (
    jspb.Message.getWrapperField(this, proto.telemetry.BlockPayload, 7));
};


/**
 * @param {?proto.telemetry.BlockPayload|undefined} value
 * @return {!proto.telemetry.Block} returns this
*/
proto.telemetry.Block.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telemetry.Block} returns this
 */
proto.telemetry.Block.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telemetry.Block.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.telemetry);
