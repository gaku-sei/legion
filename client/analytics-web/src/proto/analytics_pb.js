// source: analytics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var process_pb = require('./process_pb.js');
goog.object.extend(proto, process_pb);
var stream_pb = require('./stream_pb.js');
goog.object.extend(proto, stream_pb);
var block_pb = require('./block_pb.js');
goog.object.extend(proto, block_pb);
goog.exportSymbol('proto.analytics.BlockCallTreeReply', null, global);
goog.exportSymbol('proto.analytics.BlockCallTreeRequest', null, global);
goog.exportSymbol('proto.analytics.BlockSpansReply', null, global);
goog.exportSymbol('proto.analytics.BlockSpansRequest', null, global);
goog.exportSymbol('proto.analytics.CallTreeNode', null, global);
goog.exportSymbol('proto.analytics.FindProcessReply', null, global);
goog.exportSymbol('proto.analytics.FindProcessRequest', null, global);
goog.exportSymbol('proto.analytics.ListProcessStreamsRequest', null, global);
goog.exportSymbol('proto.analytics.ListStreamBlocksReply', null, global);
goog.exportSymbol('proto.analytics.ListStreamBlocksRequest', null, global);
goog.exportSymbol('proto.analytics.ListStreamsReply', null, global);
goog.exportSymbol('proto.analytics.ProcessListReply', null, global);
goog.exportSymbol('proto.analytics.RecentProcessesRequest', null, global);
goog.exportSymbol('proto.analytics.ScopeDesc', null, global);
goog.exportSymbol('proto.analytics.Span', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.FindProcessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.FindProcessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.FindProcessRequest.displayName = 'proto.analytics.FindProcessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.FindProcessReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.FindProcessReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.FindProcessReply.displayName = 'proto.analytics.FindProcessReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.RecentProcessesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.RecentProcessesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.RecentProcessesRequest.displayName = 'proto.analytics.RecentProcessesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ProcessListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.ProcessListReply.repeatedFields_, null);
};
goog.inherits(proto.analytics.ProcessListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ProcessListReply.displayName = 'proto.analytics.ProcessListReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ListProcessStreamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.ListProcessStreamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ListProcessStreamsRequest.displayName = 'proto.analytics.ListProcessStreamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ListStreamsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.ListStreamsReply.repeatedFields_, null);
};
goog.inherits(proto.analytics.ListStreamsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ListStreamsReply.displayName = 'proto.analytics.ListStreamsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ListStreamBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.ListStreamBlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ListStreamBlocksRequest.displayName = 'proto.analytics.ListStreamBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ListStreamBlocksReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.ListStreamBlocksReply.repeatedFields_, null);
};
goog.inherits(proto.analytics.ListStreamBlocksReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ListStreamBlocksReply.displayName = 'proto.analytics.ListStreamBlocksReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.CallTreeNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.CallTreeNode.repeatedFields_, null);
};
goog.inherits(proto.analytics.CallTreeNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.CallTreeNode.displayName = 'proto.analytics.CallTreeNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.BlockCallTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.BlockCallTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.BlockCallTreeRequest.displayName = 'proto.analytics.BlockCallTreeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.BlockCallTreeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.BlockCallTreeReply.repeatedFields_, null);
};
goog.inherits(proto.analytics.BlockCallTreeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.BlockCallTreeReply.displayName = 'proto.analytics.BlockCallTreeReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.Span = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.Span, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.Span.displayName = 'proto.analytics.Span';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.ScopeDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.ScopeDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.ScopeDesc.displayName = 'proto.analytics.ScopeDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.BlockSpansRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.analytics.BlockSpansRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.BlockSpansRequest.displayName = 'proto.analytics.BlockSpansRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.analytics.BlockSpansReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.analytics.BlockSpansReply.repeatedFields_, null);
};
goog.inherits(proto.analytics.BlockSpansReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.analytics.BlockSpansReply.displayName = 'proto.analytics.BlockSpansReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.FindProcessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.FindProcessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.FindProcessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.FindProcessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.FindProcessRequest}
 */
proto.analytics.FindProcessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.FindProcessRequest;
  return proto.analytics.FindProcessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.FindProcessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.FindProcessRequest}
 */
proto.analytics.FindProcessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.FindProcessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.FindProcessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.FindProcessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.FindProcessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.analytics.FindProcessRequest.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.FindProcessRequest} returns this
 */
proto.analytics.FindProcessRequest.prototype.setProcessId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.FindProcessReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.FindProcessReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.FindProcessReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.FindProcessReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && process_pb.Process.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.FindProcessReply}
 */
proto.analytics.FindProcessReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.FindProcessReply;
  return proto.analytics.FindProcessReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.FindProcessReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.FindProcessReply}
 */
proto.analytics.FindProcessReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new process_pb.Process;
      reader.readMessage(value,process_pb.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.FindProcessReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.FindProcessReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.FindProcessReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.FindProcessReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      process_pb.Process.serializeBinaryToWriter
    );
  }
};


/**
 * optional telemetry.Process process = 1;
 * @return {?proto.telemetry.Process}
 */
proto.analytics.FindProcessReply.prototype.getProcess = function() {
  return /** @type{?proto.telemetry.Process} */ (
    jspb.Message.getWrapperField(this, process_pb.Process, 1));
};


/**
 * @param {?proto.telemetry.Process|undefined} value
 * @return {!proto.analytics.FindProcessReply} returns this
*/
proto.analytics.FindProcessReply.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.analytics.FindProcessReply} returns this
 */
proto.analytics.FindProcessReply.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.analytics.FindProcessReply.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.RecentProcessesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.RecentProcessesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.RecentProcessesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.RecentProcessesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.RecentProcessesRequest}
 */
proto.analytics.RecentProcessesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.RecentProcessesRequest;
  return proto.analytics.RecentProcessesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.RecentProcessesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.RecentProcessesRequest}
 */
proto.analytics.RecentProcessesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.RecentProcessesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.RecentProcessesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.RecentProcessesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.RecentProcessesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.ProcessListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ProcessListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ProcessListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ProcessListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ProcessListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    process_pb.Process.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ProcessListReply}
 */
proto.analytics.ProcessListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ProcessListReply;
  return proto.analytics.ProcessListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ProcessListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ProcessListReply}
 */
proto.analytics.ProcessListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new process_pb.Process;
      reader.readMessage(value,process_pb.Process.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ProcessListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ProcessListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ProcessListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ProcessListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      process_pb.Process.serializeBinaryToWriter
    );
  }
};


/**
 * repeated telemetry.Process processes = 1;
 * @return {!Array<!proto.telemetry.Process>}
 */
proto.analytics.ProcessListReply.prototype.getProcessesList = function() {
  return /** @type{!Array<!proto.telemetry.Process>} */ (
    jspb.Message.getRepeatedWrapperField(this, process_pb.Process, 1));
};


/**
 * @param {!Array<!proto.telemetry.Process>} value
 * @return {!proto.analytics.ProcessListReply} returns this
*/
proto.analytics.ProcessListReply.prototype.setProcessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.telemetry.Process=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telemetry.Process}
 */
proto.analytics.ProcessListReply.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.telemetry.Process, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.ProcessListReply} returns this
 */
proto.analytics.ProcessListReply.prototype.clearProcessesList = function() {
  return this.setProcessesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ListProcessStreamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ListProcessStreamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ListProcessStreamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListProcessStreamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ListProcessStreamsRequest}
 */
proto.analytics.ListProcessStreamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ListProcessStreamsRequest;
  return proto.analytics.ListProcessStreamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ListProcessStreamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ListProcessStreamsRequest}
 */
proto.analytics.ListProcessStreamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ListProcessStreamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ListProcessStreamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ListProcessStreamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListProcessStreamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.analytics.ListProcessStreamsRequest.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.ListProcessStreamsRequest} returns this
 */
proto.analytics.ListProcessStreamsRequest.prototype.setProcessId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.ListStreamsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ListStreamsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ListStreamsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ListStreamsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    stream_pb.Stream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ListStreamsReply}
 */
proto.analytics.ListStreamsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ListStreamsReply;
  return proto.analytics.ListStreamsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ListStreamsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ListStreamsReply}
 */
proto.analytics.ListStreamsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stream_pb.Stream;
      reader.readMessage(value,stream_pb.Stream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ListStreamsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ListStreamsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ListStreamsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      stream_pb.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * repeated telemetry.Stream streams = 1;
 * @return {!Array<!proto.telemetry.Stream>}
 */
proto.analytics.ListStreamsReply.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.telemetry.Stream>} */ (
    jspb.Message.getRepeatedWrapperField(this, stream_pb.Stream, 1));
};


/**
 * @param {!Array<!proto.telemetry.Stream>} value
 * @return {!proto.analytics.ListStreamsReply} returns this
*/
proto.analytics.ListStreamsReply.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.telemetry.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telemetry.Stream}
 */
proto.analytics.ListStreamsReply.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.telemetry.Stream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.ListStreamsReply} returns this
 */
proto.analytics.ListStreamsReply.prototype.clearStreamsList = function() {
  return this.setStreamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ListStreamBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ListStreamBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ListStreamBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ListStreamBlocksRequest}
 */
proto.analytics.ListStreamBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ListStreamBlocksRequest;
  return proto.analytics.ListStreamBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ListStreamBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ListStreamBlocksRequest}
 */
proto.analytics.ListStreamBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ListStreamBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ListStreamBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ListStreamBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.analytics.ListStreamBlocksRequest.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.ListStreamBlocksRequest} returns this
 */
proto.analytics.ListStreamBlocksRequest.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.ListStreamBlocksReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ListStreamBlocksReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ListStreamBlocksReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ListStreamBlocksReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamBlocksReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    block_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ListStreamBlocksReply}
 */
proto.analytics.ListStreamBlocksReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ListStreamBlocksReply;
  return proto.analytics.ListStreamBlocksReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ListStreamBlocksReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ListStreamBlocksReply}
 */
proto.analytics.ListStreamBlocksReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new block_pb.Block;
      reader.readMessage(value,block_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ListStreamBlocksReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ListStreamBlocksReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ListStreamBlocksReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ListStreamBlocksReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      block_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated telemetry.Block blocks = 1;
 * @return {!Array<!proto.telemetry.Block>}
 */
proto.analytics.ListStreamBlocksReply.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.telemetry.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, block_pb.Block, 1));
};


/**
 * @param {!Array<!proto.telemetry.Block>} value
 * @return {!proto.analytics.ListStreamBlocksReply} returns this
*/
proto.analytics.ListStreamBlocksReply.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.telemetry.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telemetry.Block}
 */
proto.analytics.ListStreamBlocksReply.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.telemetry.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.ListStreamBlocksReply} returns this
 */
proto.analytics.ListStreamBlocksReply.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.CallTreeNode.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.CallTreeNode.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.CallTreeNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.CallTreeNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.CallTreeNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    beginMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    scopesList: jspb.Message.toObjectList(msg.getScopesList(),
    proto.analytics.CallTreeNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.CallTreeNode}
 */
proto.analytics.CallTreeNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.CallTreeNode;
  return proto.analytics.CallTreeNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.CallTreeNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.CallTreeNode}
 */
proto.analytics.CallTreeNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeginMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndMs(value);
      break;
    case 4:
      var value = new proto.analytics.CallTreeNode;
      reader.readMessage(value,proto.analytics.CallTreeNode.deserializeBinaryFromReader);
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.CallTreeNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.CallTreeNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.CallTreeNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.CallTreeNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBeginMs();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getEndMs();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.analytics.CallTreeNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.analytics.CallTreeNode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.CallTreeNode} returns this
 */
proto.analytics.CallTreeNode.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double begin_ms = 2;
 * @return {number}
 */
proto.analytics.CallTreeNode.prototype.getBeginMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.CallTreeNode} returns this
 */
proto.analytics.CallTreeNode.prototype.setBeginMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double end_ms = 3;
 * @return {number}
 */
proto.analytics.CallTreeNode.prototype.getEndMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.CallTreeNode} returns this
 */
proto.analytics.CallTreeNode.prototype.setEndMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated CallTreeNode scopes = 4;
 * @return {!Array<!proto.analytics.CallTreeNode>}
 */
proto.analytics.CallTreeNode.prototype.getScopesList = function() {
  return /** @type{!Array<!proto.analytics.CallTreeNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.analytics.CallTreeNode, 4));
};


/**
 * @param {!Array<!proto.analytics.CallTreeNode>} value
 * @return {!proto.analytics.CallTreeNode} returns this
*/
proto.analytics.CallTreeNode.prototype.setScopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.analytics.CallTreeNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.analytics.CallTreeNode}
 */
proto.analytics.CallTreeNode.prototype.addScopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.analytics.CallTreeNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.CallTreeNode} returns this
 */
proto.analytics.CallTreeNode.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.BlockCallTreeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.BlockCallTreeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.BlockCallTreeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockCallTreeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && process_pb.Process.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && stream_pb.Stream.toObject(includeInstance, f),
    blockId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.BlockCallTreeRequest}
 */
proto.analytics.BlockCallTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.BlockCallTreeRequest;
  return proto.analytics.BlockCallTreeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.BlockCallTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.BlockCallTreeRequest}
 */
proto.analytics.BlockCallTreeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new process_pb.Process;
      reader.readMessage(value,process_pb.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 2:
      var value = new stream_pb.Stream;
      reader.readMessage(value,stream_pb.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.BlockCallTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.BlockCallTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.BlockCallTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockCallTreeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      process_pb.Process.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.Stream.serializeBinaryToWriter
    );
  }
  f = message.getBlockId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional telemetry.Process process = 1;
 * @return {?proto.telemetry.Process}
 */
proto.analytics.BlockCallTreeRequest.prototype.getProcess = function() {
  return /** @type{?proto.telemetry.Process} */ (
    jspb.Message.getWrapperField(this, process_pb.Process, 1));
};


/**
 * @param {?proto.telemetry.Process|undefined} value
 * @return {!proto.analytics.BlockCallTreeRequest} returns this
*/
proto.analytics.BlockCallTreeRequest.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.analytics.BlockCallTreeRequest} returns this
 */
proto.analytics.BlockCallTreeRequest.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.analytics.BlockCallTreeRequest.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional telemetry.Stream stream = 2;
 * @return {?proto.telemetry.Stream}
 */
proto.analytics.BlockCallTreeRequest.prototype.getStream = function() {
  return /** @type{?proto.telemetry.Stream} */ (
    jspb.Message.getWrapperField(this, stream_pb.Stream, 2));
};


/**
 * @param {?proto.telemetry.Stream|undefined} value
 * @return {!proto.analytics.BlockCallTreeRequest} returns this
*/
proto.analytics.BlockCallTreeRequest.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.analytics.BlockCallTreeRequest} returns this
 */
proto.analytics.BlockCallTreeRequest.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.analytics.BlockCallTreeRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string block_id = 3;
 * @return {string}
 */
proto.analytics.BlockCallTreeRequest.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.BlockCallTreeRequest} returns this
 */
proto.analytics.BlockCallTreeRequest.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.BlockCallTreeReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.BlockCallTreeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.BlockCallTreeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.BlockCallTreeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockCallTreeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.analytics.CallTreeNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.BlockCallTreeReply}
 */
proto.analytics.BlockCallTreeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.BlockCallTreeReply;
  return proto.analytics.BlockCallTreeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.BlockCallTreeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.BlockCallTreeReply}
 */
proto.analytics.BlockCallTreeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.analytics.CallTreeNode;
      reader.readMessage(value,proto.analytics.CallTreeNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.BlockCallTreeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.BlockCallTreeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.BlockCallTreeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockCallTreeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.analytics.CallTreeNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CallTreeNode nodes = 1;
 * @return {!Array<!proto.analytics.CallTreeNode>}
 */
proto.analytics.BlockCallTreeReply.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.analytics.CallTreeNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.analytics.CallTreeNode, 1));
};


/**
 * @param {!Array<!proto.analytics.CallTreeNode>} value
 * @return {!proto.analytics.BlockCallTreeReply} returns this
*/
proto.analytics.BlockCallTreeReply.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.analytics.CallTreeNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.analytics.CallTreeNode}
 */
proto.analytics.BlockCallTreeReply.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.analytics.CallTreeNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.BlockCallTreeReply} returns this
 */
proto.analytics.BlockCallTreeReply.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.Span.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.Span.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.Span} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.Span.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeHash: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beginMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    endMs: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.Span}
 */
proto.analytics.Span.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.Span;
  return proto.analytics.Span.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.Span} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.Span}
 */
proto.analytics.Span.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScopeHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDepth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeginMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.Span.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.Span.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.Span} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.Span.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeHash();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBeginMs();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getEndMs();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional uint32 scope_hash = 1;
 * @return {number}
 */
proto.analytics.Span.prototype.getScopeHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.Span} returns this
 */
proto.analytics.Span.prototype.setScopeHash = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 depth = 2;
 * @return {number}
 */
proto.analytics.Span.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.Span} returns this
 */
proto.analytics.Span.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double begin_ms = 3;
 * @return {number}
 */
proto.analytics.Span.prototype.getBeginMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.Span} returns this
 */
proto.analytics.Span.prototype.setBeginMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double end_ms = 4;
 * @return {number}
 */
proto.analytics.Span.prototype.getEndMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.Span} returns this
 */
proto.analytics.Span.prototype.setEndMs = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.ScopeDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.ScopeDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.ScopeDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ScopeDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    line: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.ScopeDesc}
 */
proto.analytics.ScopeDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.ScopeDesc;
  return proto.analytics.ScopeDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.ScopeDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.ScopeDesc}
 */
proto.analytics.ScopeDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLine(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.ScopeDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.ScopeDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.ScopeDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.ScopeDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHash();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.analytics.ScopeDesc.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.ScopeDesc} returns this
 */
proto.analytics.ScopeDesc.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.analytics.ScopeDesc.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.ScopeDesc} returns this
 */
proto.analytics.ScopeDesc.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 line = 3;
 * @return {number}
 */
proto.analytics.ScopeDesc.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.ScopeDesc} returns this
 */
proto.analytics.ScopeDesc.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 hash = 4;
 * @return {number}
 */
proto.analytics.ScopeDesc.prototype.getHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.analytics.ScopeDesc} returns this
 */
proto.analytics.ScopeDesc.prototype.setHash = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.BlockSpansRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.BlockSpansRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.BlockSpansRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockSpansRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && process_pb.Process.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && stream_pb.Stream.toObject(includeInstance, f),
    blockId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.BlockSpansRequest}
 */
proto.analytics.BlockSpansRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.BlockSpansRequest;
  return proto.analytics.BlockSpansRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.BlockSpansRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.BlockSpansRequest}
 */
proto.analytics.BlockSpansRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new process_pb.Process;
      reader.readMessage(value,process_pb.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 2:
      var value = new stream_pb.Stream;
      reader.readMessage(value,stream_pb.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.BlockSpansRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.BlockSpansRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.BlockSpansRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockSpansRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      process_pb.Process.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stream_pb.Stream.serializeBinaryToWriter
    );
  }
  f = message.getBlockId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional telemetry.Process process = 1;
 * @return {?proto.telemetry.Process}
 */
proto.analytics.BlockSpansRequest.prototype.getProcess = function() {
  return /** @type{?proto.telemetry.Process} */ (
    jspb.Message.getWrapperField(this, process_pb.Process, 1));
};


/**
 * @param {?proto.telemetry.Process|undefined} value
 * @return {!proto.analytics.BlockSpansRequest} returns this
*/
proto.analytics.BlockSpansRequest.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.analytics.BlockSpansRequest} returns this
 */
proto.analytics.BlockSpansRequest.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.analytics.BlockSpansRequest.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional telemetry.Stream stream = 2;
 * @return {?proto.telemetry.Stream}
 */
proto.analytics.BlockSpansRequest.prototype.getStream = function() {
  return /** @type{?proto.telemetry.Stream} */ (
    jspb.Message.getWrapperField(this, stream_pb.Stream, 2));
};


/**
 * @param {?proto.telemetry.Stream|undefined} value
 * @return {!proto.analytics.BlockSpansRequest} returns this
*/
proto.analytics.BlockSpansRequest.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.analytics.BlockSpansRequest} returns this
 */
proto.analytics.BlockSpansRequest.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.analytics.BlockSpansRequest.prototype.hasStream = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string block_id = 3;
 * @return {string}
 */
proto.analytics.BlockSpansRequest.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.analytics.BlockSpansRequest} returns this
 */
proto.analytics.BlockSpansRequest.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.analytics.BlockSpansReply.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.analytics.BlockSpansReply.prototype.toObject = function(opt_includeInstance) {
  return proto.analytics.BlockSpansReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.analytics.BlockSpansReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockSpansReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopesList: jspb.Message.toObjectList(msg.getScopesList(),
    proto.analytics.ScopeDesc.toObject, includeInstance),
    spansList: jspb.Message.toObjectList(msg.getSpansList(),
    proto.analytics.Span.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.analytics.BlockSpansReply}
 */
proto.analytics.BlockSpansReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.analytics.BlockSpansReply;
  return proto.analytics.BlockSpansReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.analytics.BlockSpansReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.analytics.BlockSpansReply}
 */
proto.analytics.BlockSpansReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.analytics.ScopeDesc;
      reader.readMessage(value,proto.analytics.ScopeDesc.deserializeBinaryFromReader);
      msg.addScopes(value);
      break;
    case 2:
      var value = new proto.analytics.Span;
      reader.readMessage(value,proto.analytics.Span.deserializeBinaryFromReader);
      msg.addSpans(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.analytics.BlockSpansReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.analytics.BlockSpansReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.analytics.BlockSpansReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.analytics.BlockSpansReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.analytics.ScopeDesc.serializeBinaryToWriter
    );
  }
  f = message.getSpansList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.analytics.Span.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ScopeDesc scopes = 1;
 * @return {!Array<!proto.analytics.ScopeDesc>}
 */
proto.analytics.BlockSpansReply.prototype.getScopesList = function() {
  return /** @type{!Array<!proto.analytics.ScopeDesc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.analytics.ScopeDesc, 1));
};


/**
 * @param {!Array<!proto.analytics.ScopeDesc>} value
 * @return {!proto.analytics.BlockSpansReply} returns this
*/
proto.analytics.BlockSpansReply.prototype.setScopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.analytics.ScopeDesc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.analytics.ScopeDesc}
 */
proto.analytics.BlockSpansReply.prototype.addScopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.analytics.ScopeDesc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.BlockSpansReply} returns this
 */
proto.analytics.BlockSpansReply.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};


/**
 * repeated Span spans = 2;
 * @return {!Array<!proto.analytics.Span>}
 */
proto.analytics.BlockSpansReply.prototype.getSpansList = function() {
  return /** @type{!Array<!proto.analytics.Span>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.analytics.Span, 2));
};


/**
 * @param {!Array<!proto.analytics.Span>} value
 * @return {!proto.analytics.BlockSpansReply} returns this
*/
proto.analytics.BlockSpansReply.prototype.setSpansList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.analytics.Span=} opt_value
 * @param {number=} opt_index
 * @return {!proto.analytics.Span}
 */
proto.analytics.BlockSpansReply.prototype.addSpans = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.analytics.Span, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.analytics.BlockSpansReply} returns this
 */
proto.analytics.BlockSpansReply.prototype.clearSpansList = function() {
  return this.setSpansList([]);
};


goog.object.extend(exports, proto.analytics);
