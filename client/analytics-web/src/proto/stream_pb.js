// source: stream.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.telemetry.ContainerMetadata', null, global);
goog.exportSymbol('proto.telemetry.Stream', null, global);
goog.exportSymbol('proto.telemetry.UDTMember', null, global);
goog.exportSymbol('proto.telemetry.UserDefinedType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.UDTMember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telemetry.UDTMember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.UDTMember.displayName = 'proto.telemetry.UDTMember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.UserDefinedType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.telemetry.UserDefinedType.repeatedFields_, null);
};
goog.inherits(proto.telemetry.UserDefinedType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.UserDefinedType.displayName = 'proto.telemetry.UserDefinedType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.ContainerMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.telemetry.ContainerMetadata.repeatedFields_, null);
};
goog.inherits(proto.telemetry.ContainerMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.ContainerMetadata.displayName = 'proto.telemetry.ContainerMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telemetry.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.telemetry.Stream.repeatedFields_, null);
};
goog.inherits(proto.telemetry.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telemetry.Stream.displayName = 'proto.telemetry.Stream';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.UDTMember.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.UDTMember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.UDTMember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.UDTMember.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isReference: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.UDTMember}
 */
proto.telemetry.UDTMember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.UDTMember;
  return proto.telemetry.UDTMember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.UDTMember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.UDTMember}
 */
proto.telemetry.UDTMember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.UDTMember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.UDTMember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.UDTMember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.UDTMember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getIsReference();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.telemetry.UDTMember.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.UDTMember} returns this
 */
proto.telemetry.UDTMember.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type_name = 2;
 * @return {string}
 */
proto.telemetry.UDTMember.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.UDTMember} returns this
 */
proto.telemetry.UDTMember.prototype.setTypeName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 offset = 3;
 * @return {number}
 */
proto.telemetry.UDTMember.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.telemetry.UDTMember} returns this
 */
proto.telemetry.UDTMember.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 size = 4;
 * @return {number}
 */
proto.telemetry.UDTMember.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.telemetry.UDTMember} returns this
 */
proto.telemetry.UDTMember.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_reference = 5;
 * @return {boolean}
 */
proto.telemetry.UDTMember.prototype.getIsReference = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telemetry.UDTMember} returns this
 */
proto.telemetry.UDTMember.prototype.setIsReference = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.telemetry.UserDefinedType.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.UserDefinedType.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.UserDefinedType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.UserDefinedType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.UserDefinedType.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.telemetry.UDTMember.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.UserDefinedType}
 */
proto.telemetry.UserDefinedType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.UserDefinedType;
  return proto.telemetry.UserDefinedType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.UserDefinedType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.UserDefinedType}
 */
proto.telemetry.UserDefinedType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSize(value);
      break;
    case 3:
      var value = new proto.telemetry.UDTMember;
      reader.readMessage(value,proto.telemetry.UDTMember.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.UserDefinedType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.UserDefinedType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.UserDefinedType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.UserDefinedType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.telemetry.UDTMember.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.telemetry.UserDefinedType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.UserDefinedType} returns this
 */
proto.telemetry.UserDefinedType.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 size = 2;
 * @return {number}
 */
proto.telemetry.UserDefinedType.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.telemetry.UserDefinedType} returns this
 */
proto.telemetry.UserDefinedType.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated UDTMember members = 3;
 * @return {!Array<!proto.telemetry.UDTMember>}
 */
proto.telemetry.UserDefinedType.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.telemetry.UDTMember>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.telemetry.UDTMember, 3));
};


/**
 * @param {!Array<!proto.telemetry.UDTMember>} value
 * @return {!proto.telemetry.UserDefinedType} returns this
*/
proto.telemetry.UserDefinedType.prototype.setMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.telemetry.UDTMember=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telemetry.UDTMember}
 */
proto.telemetry.UserDefinedType.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.telemetry.UDTMember, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.telemetry.UserDefinedType} returns this
 */
proto.telemetry.UserDefinedType.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.telemetry.ContainerMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.ContainerMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.ContainerMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.ContainerMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.ContainerMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.telemetry.UserDefinedType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.ContainerMetadata}
 */
proto.telemetry.ContainerMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.ContainerMetadata;
  return proto.telemetry.ContainerMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.ContainerMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.ContainerMetadata}
 */
proto.telemetry.ContainerMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.telemetry.UserDefinedType;
      reader.readMessage(value,proto.telemetry.UserDefinedType.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.ContainerMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.ContainerMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.ContainerMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.ContainerMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.telemetry.UserDefinedType.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserDefinedType types = 1;
 * @return {!Array<!proto.telemetry.UserDefinedType>}
 */
proto.telemetry.ContainerMetadata.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.telemetry.UserDefinedType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.telemetry.UserDefinedType, 1));
};


/**
 * @param {!Array<!proto.telemetry.UserDefinedType>} value
 * @return {!proto.telemetry.ContainerMetadata} returns this
*/
proto.telemetry.ContainerMetadata.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.telemetry.UserDefinedType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telemetry.UserDefinedType}
 */
proto.telemetry.ContainerMetadata.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.telemetry.UserDefinedType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.telemetry.ContainerMetadata} returns this
 */
proto.telemetry.ContainerMetadata.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.telemetry.Stream.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telemetry.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.telemetry.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telemetry.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    processId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dependenciesMetadata: (f = msg.getDependenciesMetadata()) && proto.telemetry.ContainerMetadata.toObject(includeInstance, f),
    objectsMetadata: (f = msg.getObjectsMetadata()) && proto.telemetry.ContainerMetadata.toObject(includeInstance, f),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telemetry.Stream}
 */
proto.telemetry.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telemetry.Stream;
  return proto.telemetry.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telemetry.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telemetry.Stream}
 */
proto.telemetry.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    case 3:
      var value = new proto.telemetry.ContainerMetadata;
      reader.readMessage(value,proto.telemetry.ContainerMetadata.deserializeBinaryFromReader);
      msg.setDependenciesMetadata(value);
      break;
    case 4:
      var value = new proto.telemetry.ContainerMetadata;
      reader.readMessage(value,proto.telemetry.ContainerMetadata.deserializeBinaryFromReader);
      msg.setObjectsMetadata(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 6:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telemetry.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telemetry.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telemetry.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telemetry.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDependenciesMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.telemetry.ContainerMetadata.serializeBinaryToWriter
    );
  }
  f = message.getObjectsMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.telemetry.ContainerMetadata.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string stream_id = 1;
 * @return {string}
 */
proto.telemetry.Stream.prototype.getStreamId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.setStreamId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string process_id = 2;
 * @return {string}
 */
proto.telemetry.Stream.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.setProcessId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ContainerMetadata dependencies_metadata = 3;
 * @return {?proto.telemetry.ContainerMetadata}
 */
proto.telemetry.Stream.prototype.getDependenciesMetadata = function() {
  return /** @type{?proto.telemetry.ContainerMetadata} */ (
    jspb.Message.getWrapperField(this, proto.telemetry.ContainerMetadata, 3));
};


/**
 * @param {?proto.telemetry.ContainerMetadata|undefined} value
 * @return {!proto.telemetry.Stream} returns this
*/
proto.telemetry.Stream.prototype.setDependenciesMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.clearDependenciesMetadata = function() {
  return this.setDependenciesMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telemetry.Stream.prototype.hasDependenciesMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ContainerMetadata objects_metadata = 4;
 * @return {?proto.telemetry.ContainerMetadata}
 */
proto.telemetry.Stream.prototype.getObjectsMetadata = function() {
  return /** @type{?proto.telemetry.ContainerMetadata} */ (
    jspb.Message.getWrapperField(this, proto.telemetry.ContainerMetadata, 4));
};


/**
 * @param {?proto.telemetry.ContainerMetadata|undefined} value
 * @return {!proto.telemetry.Stream} returns this
*/
proto.telemetry.Stream.prototype.setObjectsMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.clearObjectsMetadata = function() {
  return this.setObjectsMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telemetry.Stream.prototype.hasObjectsMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string tags = 5;
 * @return {!Array<string>}
 */
proto.telemetry.Stream.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * map<string, string> properties = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.telemetry.Stream.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.telemetry.Stream} returns this
 */
proto.telemetry.Stream.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};


goog.object.extend(exports, proto.telemetry);
